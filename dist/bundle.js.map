{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ball_box/./src/core/Utils.ts","webpack://ball_box/./src/components/Ball.ts","webpack://ball_box/./src/input/JoyStick.ts","webpack://ball_box/./src/input/InputHandler.ts","webpack://ball_box/./src/components/Weapon.ts","webpack://ball_box/./src/core/Game.ts","webpack://ball_box/./src/index.ts"],"sourcesContent":["class Utils {\r\n    static randomFont(): string {\r\n        const fonts = [\"Arial\", \"Verdana\", \"Helvetica\", \"Tahoma\", \"Trebuchet MS\", \"Times New Roman\", \"Georgia\", \"Garamond\", \"Courier New\", \"Brush Script MT\"];\r\n        return fonts[Math.floor(Math.random() * fonts.length)];\r\n    }\r\n\r\n    static randomChar(): string {\r\n        return String.fromCharCode(65 + Math.floor(Math.random() * 26))\r\n    }\r\n\r\n    static randomHexColor(): string {\r\n        return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n    }\r\n\r\n    static isUserUsingMobile(): boolean {\r\n\r\n        // User agent string method\r\n        let isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\r\n\r\n        // Screen resolution method\r\n        if (!isMobile) {\r\n            let screenWidth = window.screen.width;\r\n            let screenHeight = window.screen.height;\r\n            isMobile = (screenWidth < 768 || screenHeight < 768);\r\n        }\r\n\r\n        // Touch events method\r\n        if (!isMobile) {\r\n            isMobile = (('ontouchstart' in window) || (navigator.maxTouchPoints > 0));\r\n        }\r\n\r\n        // CSS media queries method\r\n        if (!isMobile) {\r\n            let bodyElement = document.getElementsByTagName('body')[0];\r\n            isMobile = window.getComputedStyle(bodyElement).getPropertyValue('content').indexOf('mobile') !== -1;\r\n        }\r\n\r\n        return isMobile\r\n    }\r\n}\r\n\r\nexport { Utils };","import { InputHandler } from \"../input/InputHandler\";\r\nimport { Weapon } from \"./Weapon\";\r\n\r\nexport class Ball {\r\n    private radius: number;\r\n    private x: number;\r\n    private y: number;\r\n    private dx: number;\r\n    private dy: number;\r\n\r\n    constructor(x: number, y: number, dx: number, dy: number, radius: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.dx = dx;\r\n        this.dy = dy;\r\n        this.radius = radius;\r\n    }\r\n\r\n    getX(): number {\r\n        return this.x;\r\n    }\r\n\r\n    getY(): number {\r\n        return this.y;\r\n    }\r\n\r\n    getRadius(): number {\r\n        return this.radius;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D): void {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\r\n        ctx.fillStyle = \"black\";\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n\r\n    move(canvas: HTMLCanvasElement, inputHandler: InputHandler): void {\r\n        if (inputHandler.isKeyPressed(\"ArrowUp\"))\r\n            this.y = Math.max(this.y - this.dy, this.radius);\r\n        if (inputHandler.isKeyPressed(\"ArrowDown\"))\r\n            this.y = Math.min(this.y + this.dy, canvas.height - this.radius);\r\n        if (inputHandler.isKeyPressed(\"ArrowLeft\"))\r\n            this.x = Math.max(this.x - this.dx, this.radius);\r\n        if (inputHandler.isKeyPressed(\"ArrowRight\"))\r\n            this.x = Math.min(this.x + this.dx, canvas.width - this.radius);\r\n    }\r\n\r\n    handleCollisionWithWeapon(weapon: Weapon): void {\r\n        this.radius += weapon.getSize() / 10;\r\n    }\r\n\r\n    isCollidingWithWall(canvas: HTMLCanvasElement): boolean {\r\n        return (\r\n            this.x - this.radius <= 0 ||\r\n            this.x + this.radius >= canvas.width ||\r\n            this.y - this.radius <= 0 ||\r\n            this.y + this.radius >= canvas.height\r\n        );\r\n    }\r\n}\r\n","class Joystick {\r\n    private keys: Record<string, boolean>;\r\n\r\n    constructor(keys: Record<string, boolean>) {\r\n        this.keys = keys;\r\n    }\r\n\r\n    setupTouchListeners() {\r\n        window.addEventListener(\r\n            \"touchstart\",\r\n            (event) => this.handleTouchMoveOrStart(event),\r\n            { passive: false }\r\n        );\r\n        window.addEventListener(\r\n            \"touchmove\",\r\n            (event) => this.handleTouchMoveOrStart(event),\r\n            { passive: false }\r\n        );\r\n        window.addEventListener(\"touchend\", (event) =>\r\n            this.handleTouchEnd(event)\r\n        );\r\n    }\r\n\r\n    private handleTouchMoveOrStart(event: TouchEvent) {\r\n        const touch = event.touches[0];\r\n        if (!this.isJoystickTouch(touch)) return;\r\n\r\n        event.preventDefault();\r\n        this.moveJoystickBall(touch);\r\n    }\r\n\r\n    private handleTouchEnd(event: TouchEvent) {\r\n        const touch = event.changedTouches[0];\r\n        if (!this.isJoystickTouch(touch)) return;\r\n\r\n        event.preventDefault();\r\n        this.resetJoystickBall();\r\n    }\r\n\r\n    private isJoystickTouch(touch: Touch): boolean {\r\n        return (\r\n            touch.target instanceof HTMLElement &&\r\n            touch.target.id === \"joyStickBall\"\r\n        );\r\n    }\r\n\r\n    private moveJoystickBall(touch: Touch) {\r\n        const joystickBall = document.getElementById(\r\n            \"joyStickBall\"\r\n        ) as HTMLElement;\r\n        const joystickRing = document.getElementById(\r\n            \"joyStickRing\"\r\n        ) as HTMLElement;\r\n\r\n        const { left, top, width, height } =\r\n            joystickRing.getBoundingClientRect();\r\n        const ringCenterX = left + width / 2;\r\n        const ringCenterY = top + height / 2;\r\n\r\n        const deltaX = touch.clientX - ringCenterX;\r\n        const deltaY = touch.clientY - ringCenterY;\r\n\r\n        joystickBall.style.left = `${deltaX}px`;\r\n        joystickBall.style.top = `${deltaY}px`;\r\n\r\n        this.updateKeysBasedOnAngle(deltaX, deltaY);\r\n    }\r\n\r\n    private updateKeysBasedOnAngle(deltaX: number, deltaY: number) {\r\n        const angle = Math.atan2(deltaY, deltaX) * (180 / Math.PI);\r\n        const adjustedAngle = (-angle + 360 + 22.5) % 360; // Offset by 22.5 for direction alignment\r\n        const directionIndex = Math.floor(adjustedAngle / 45); // 360° divided into 8 directions\r\n\r\n        const directionMapping: Record<number, string[]> = {\r\n            0: [\"ArrowRight\"],\r\n            1: [\"ArrowRight\", \"ArrowUp\"],\r\n            2: [\"ArrowUp\"],\r\n            3: [\"ArrowUp\", \"ArrowLeft\"],\r\n            4: [\"ArrowLeft\"],\r\n            5: [\"ArrowLeft\", \"ArrowDown\"],\r\n            6: [\"ArrowDown\"],\r\n            7: [\"ArrowDown\", \"ArrowRight\"],\r\n        };\r\n\r\n        this.resetKeys();\r\n        const directions = directionMapping[directionIndex] || [];\r\n        directions.forEach((dir) => (this.keys[dir] = true));\r\n    }\r\n\r\n    private resetJoystickBall() {\r\n        const joystickBall = document.getElementById(\r\n            \"joyStickBall\"\r\n        ) as HTMLElement;\r\n        joystickBall.style.left = \"auto\";\r\n        joystickBall.style.top = \"auto\";\r\n        this.resetKeys();\r\n    }\r\n\r\n    private resetKeys() {\r\n        Object.keys(this.keys).forEach((key) => (this.keys[key] = false));\r\n    }\r\n}\r\n\r\nexport default Joystick;","import Joystick from \"./JoyStick\";\r\nimport { Utils } from \"../core/Utils\";\r\n\r\nexport class InputHandler {\r\n    private keys: Record<string, boolean>;\r\n    private altKeys: Record<string, string>;\r\n    private joystick: Joystick | undefined;\r\n\r\n    constructor() {\r\n        this.keys = {\r\n            ArrowUp: false,\r\n            ArrowDown: false,\r\n            ArrowLeft: false,\r\n            ArrowRight: false,\r\n        };\r\n\r\n        this.altKeys = {\r\n            w: \"ArrowUp\",\r\n            s: \"ArrowDown\",\r\n            a: \"ArrowLeft\",\r\n            d: \"ArrowRight\",\r\n        };\r\n\r\n        this.setupEventListeners();\r\n    }\r\n\r\n    setupEventListeners() {\r\n        if (!Utils.isUserUsingMobile()) {\r\n            window.addEventListener(\"keydown\", (event) =>\r\n                this.handleKeyDownUp(event)\r\n            );\r\n            window.addEventListener(\"keyup\", (event) =>\r\n                this.handleKeyDownUp(event)\r\n            );\r\n        } else {\r\n            this.joystick = new Joystick(this.keys);\r\n            this.joystick.setupTouchListeners();\r\n        }\r\n    }\r\n\r\n    handleKeyDownUp(event: KeyboardEvent) {\r\n        let key = event.key;\r\n        if (key.toLocaleLowerCase() in this.altKeys)\r\n            key = this.altKeys[key.toLocaleLowerCase()];\r\n\r\n        if (key in this.keys) {\r\n            event.preventDefault();\r\n            this.keys[key] = event.type === \"keydown\";\r\n        }\r\n    }\r\n\r\n    isKeyPressed(key: string): boolean {\r\n        return !!this.keys[key];\r\n    }\r\n\r\n    resetKeys() {\r\n        for (let key in this.keys) {\r\n            this.keys[key] = false;\r\n        }\r\n    }\r\n}\r\n","import { Utils } from \"../core/Utils\";\r\nimport { Ball } from \"./Ball\";\r\n\r\nexport class Weapon {\r\n    private static startingLocs: string[] = [\"top\", \"bottom\", \"left\", \"right\"];\r\n\r\n    private startingLoc: string;\r\n    private x: number;\r\n    private y: number;\r\n    private width: number;\r\n    private height: number;\r\n    private dx: number;\r\n    private dy: number;\r\n    private speed: number;\r\n    private font: string;\r\n    private letter: string;\r\n    private color: string;\r\n\r\n    constructor(ctx: CanvasRenderingContext2D) {\r\n        let size = Math.floor(Math.random() * 20) + 10; // [10, 30)\r\n\r\n        this.font = `${size}px ${Utils.randomFont()}`;\r\n        this.letter = Utils.randomChar();\r\n        this.color = Utils.randomHexColor();\r\n\r\n        ctx.font = this.font;\r\n        ctx.fillStyle = this.color;\r\n        let metrics = ctx.measureText(this.letter);\r\n\r\n        this.width =\r\n            metrics.actualBoundingBoxLeft + metrics.actualBoundingBoxRight;\r\n        this.height =\r\n            metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\r\n\r\n        this.startingLoc = Weapon.randomStartingLoc();\r\n        [this.x, this.y, this.dx, this.dy] = this.randomTrajectory(\r\n            this.startingLoc,\r\n            ctx.canvas\r\n        );\r\n\r\n        this.speed = Math.floor(Math.random() * 2) + 1; // [1, 3)\r\n    }\r\n\r\n    public static randomStartingLoc(): string {\r\n        return Weapon.startingLocs[\r\n            Math.floor(Math.random() * Weapon.startingLocs.length)\r\n        ];\r\n    }\r\n\r\n    public randomTrajectory(\r\n        startingLoc: string,\r\n        canvas: HTMLCanvasElement\r\n    ): [number, number, number, number] {\r\n        let x: number, y: number, dx: number, dy: number;\r\n        switch (startingLoc) {\r\n            case \"top\":\r\n                x = Math.floor(Math.random() * canvas.width);\r\n                y = 0 - this.height;\r\n                dx = Math.random() * 2 - 1;\r\n                dy = Math.random();\r\n                break;\r\n\r\n            case \"bottom\":\r\n                x = Math.floor(Math.random() * canvas.width);\r\n                y = canvas.height;\r\n                dx = Math.random() * 2 - 1;\r\n                dy = -Math.random();\r\n                break;\r\n\r\n            case \"left\":\r\n                x = 0 - this.width;\r\n                y = Math.floor(Math.random() * canvas.height);\r\n                dx = Math.random();\r\n                dy = Math.random() * 2 - 1;\r\n                break;\r\n\r\n            case \"right\":\r\n                x = canvas.width;\r\n                y = Math.floor(Math.random() * canvas.height);\r\n                dx = -Math.random();\r\n                dy = Math.random() * 2 - 1;\r\n                break;\r\n\r\n            default:\r\n                throw new Error(\"Invalid starting location\");\r\n        }\r\n\r\n        return [x, y, dx, dy];\r\n    }\r\n\r\n    getSize(): number {\r\n        return this.width + this.height / 2;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.font = this.font;\r\n        ctx.fillStyle = this.color;\r\n        ctx.fillText(this.letter, this.x, this.y);\r\n    }\r\n\r\n    move() {\r\n        this.x += this.dx * this.speed;\r\n        this.y += this.dy * this.speed;\r\n    }\r\n\r\n    hasCollidedWithBall(ball: Ball): boolean {\r\n        const centersDiffX = Math.abs(ball.getX() - this.x - this.width / 2);\r\n        const centersDiffY = Math.abs(ball.getY() - this.y - this.height / 2);\r\n\r\n        if (centersDiffX > this.width / 2 + ball.getRadius()) return false;\r\n        if (centersDiffY > this.height / 2 + ball.getRadius()) return false;\r\n\r\n        if (centersDiffX <= this.width / 2) return true;\r\n        if (centersDiffY <= this.height / 2) return true;\r\n\r\n        const cornerDistanceSq =\r\n            (centersDiffX - this.width / 2) ** 2 +\r\n            (centersDiffY - this.height / 2) ** 2;\r\n        return cornerDistanceSq <= ball.getRadius() ** 2;\r\n    }\r\n\r\n    isOutOfBounds(canvas: HTMLCanvasElement): boolean {\r\n        return (\r\n            this.x + this.width < 0 ||\r\n            this.x > canvas.width ||\r\n            this.y + this.height < 0 ||\r\n            this.y > canvas.height\r\n        );\r\n    }\r\n\r\n    isTrajectoryComplete(canvas: HTMLCanvasElement): boolean {\r\n        switch (this.startingLoc) {\r\n            case \"top\":\r\n                return this.y > canvas.height;\r\n            case \"bottom\":\r\n                return this.y + this.height < 0;\r\n            case \"left\":\r\n                return this.x > canvas.width;\r\n            case \"right\":\r\n                return this.x + this.width < 0;\r\n            default:\r\n                throw new Error(\"Invalid starting location\");\r\n        }\r\n    }\r\n}\r\n","import { Ball } from \"../components/Ball\";\r\nimport { InputHandler } from \"../input/InputHandler\";\r\nimport { Weapon } from \"../components/Weapon\";\r\n\r\nexport class Game {\r\n    canvas: HTMLCanvasElement;\r\n    ctx: CanvasRenderingContext2D;\r\n\r\n    running: boolean;\r\n    animationFrameId: number | null;\r\n\r\n    inputHandler: InputHandler;\r\n    difficultySlider: HTMLSelectElement;\r\n    difficulty: number;\r\n    ball: Ball;\r\n    weapons: Weapon[];\r\n\r\n    constructor(canvasId: string) {\r\n        this.canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n        this.ctx = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n        this.ctx.textBaseline = \"top\";\r\n\r\n        this.running = false;\r\n        this.animationFrameId = null;\r\n\r\n        this.inputHandler = new InputHandler();\r\n\r\n        this.difficultySlider = document.getElementById(\r\n            \"difficultySlider\"\r\n        ) as HTMLSelectElement;\r\n        this.difficulty = parseInt(this.difficultySlider.value);\r\n        this.difficultySlider.addEventListener(\r\n            \"input\",\r\n            () => (this.difficulty = parseInt(this.difficultySlider.value))\r\n        );\r\n\r\n        this.ball = new Ball(\r\n            this.canvas.width / 2,\r\n            this.canvas.height / 2,\r\n            2,\r\n            2,\r\n            this.difficulty * 2\r\n        );\r\n        this.weapons = [];\r\n    }\r\n\r\n    clearCanvas() {\r\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n\r\n    gameLoop() {\r\n        if (!this.running) return;\r\n\r\n        if (Math.random() < this.difficulty / 100) {\r\n            this.weapons.push(new Weapon(this.ctx));\r\n        }\r\n\r\n        this.ball.move(this.canvas, this.inputHandler);\r\n        for (let weapon of this.weapons) weapon.move();\r\n\r\n        this.weapons = this.weapons.filter((weapon) => {\r\n            if (weapon.isTrajectoryComplete(this.canvas)) return false;\r\n\r\n            if (weapon.hasCollidedWithBall(this.ball)) {\r\n                this.ball.handleCollisionWithWeapon(weapon);\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        });\r\n\r\n        this.clearCanvas();\r\n        this.ball.draw(this.ctx);\r\n        for (let weapon of this.weapons) weapon.draw(this.ctx);\r\n\r\n        // if ball is colliding with wall, game over\r\n        if (this.ball.isCollidingWithWall(this.canvas)) {\r\n            this.animationFrameId = requestAnimationFrame(() =>\r\n                this.gameOver()\r\n            );\r\n            return;\r\n        }\r\n\r\n        /*\r\n         * requestAnimationFrame is like setTimeout(1000/60) but better (therefore non blocking)\r\n         * it tells the browser to call the callback function before the next repaint\r\n         * 2 advantages:\r\n         *   1. It only executes as many times as the browser can repaint the screen (typically 60hz)\r\n         *      instead of executing as fast is it can thus saving unnecessary work\r\n         *   2. It is executed in the optimal time for the browser, typically before the next repaint\r\n         */\r\n        this.animationFrameId = requestAnimationFrame(() => this.gameLoop());\r\n    }\r\n\r\n    start() {\r\n        this.clearCanvas();\r\n\r\n        this.running = true;\r\n        this.gameLoop();\r\n    }\r\n\r\n    restartGame() {\r\n        const modal = document.querySelector(\".fsModal\");\r\n        if (modal) modal.remove();\r\n\r\n        this.clearCanvas();\r\n        this.inputHandler.resetKeys();\r\n        //TODO DRY\r\n        this.ball = new Ball(\r\n            this.canvas.width / 2,\r\n            this.canvas.height / 2,\r\n            2,\r\n            2,\r\n            this.difficulty * 2\r\n        );\r\n        this.weapons = [];\r\n        this.start();\r\n    }\r\n\r\n    gameOver() {\r\n        // modal with restart button\r\n        const modal = document.createElement(\"div\");\r\n        modal.classList.add(\"fsModal\"); // full screen modal\r\n        modal.innerHTML = `\r\n            <div class=\"modalContent\">\r\n                <h1 class=\"gameOver\">Game Over</h1>\r\n                <button class=\"controlButton\">Restart</button>\r\n            </div>\r\n        `;\r\n\r\n        const controlButton = modal.querySelector(\".controlButton\");\r\n        if (controlButton)\r\n            controlButton.addEventListener(\r\n                \"click\",\r\n                this.restartGame.bind(this)\r\n            );\r\n\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    stop() {\r\n        this.running = false;\r\n        if (this.animationFrameId) cancelAnimationFrame(this.animationFrameId);\r\n\r\n        // TODO cleanup like remove event listeners\r\n    }\r\n}\r\n","import { Utils } from \"./core/Utils\";\r\nimport { Game } from \"./core/Game\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        main: () => void;\r\n    }\r\n}\r\n\r\nif (Utils.isUserUsingMobile()) {\r\n    document.getElementById(\"joyStickContainer\")!.style.display = \"block\";\r\n\r\n    const canvas = document.getElementById(\"gameCanvas\") as HTMLCanvasElement;\r\n    const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\r\n    // draw text \"click on start button\"\r\n    ctx.font = \"30px Arial\";\r\n    ctx.fillStyle = \"black\";\r\n    ctx.textAlign = \"center\";\r\n    ctx.fillText(\"Tap on Start\", canvas.width / 2, canvas.height / 2 - 20);\r\n    ctx.fillText(\"to use JoyStick\", canvas.width / 2, canvas.height / 2 + 20);\r\n}\r\n\r\n// Game entry point\r\nlet currentGame: Game | null = null; // Store the currently running game\r\n\r\nfunction main() {\r\n    // Stop the current game if it exists\r\n    if (currentGame) {\r\n        currentGame.stop();\r\n        currentGame = null;\r\n    }\r\n\r\n    currentGame = new Game(\"gameCanvas\");\r\n    currentGame.start();\r\n}\r\n\r\nwindow.main = main;\r\n"],"names":["Utils","randomFont","fonts","Math","floor","random","length","randomChar","String","fromCharCode","randomHexColor","toString","isUserUsingMobile","isMobile","test","navigator","userAgent","screenWidth","window","screen","width","screenHeight","height","maxTouchPoints","bodyElement","document","getElementsByTagName","getComputedStyle","getPropertyValue","indexOf","Ball","constructor","x","y","dx","dy","radius","this","getX","getY","getRadius","draw","ctx","beginPath","arc","PI","fillStyle","fill","closePath","move","canvas","inputHandler","isKeyPressed","max","min","handleCollisionWithWeapon","weapon","getSize","isCollidingWithWall","keys","setupTouchListeners","addEventListener","event","handleTouchMoveOrStart","passive","handleTouchEnd","touch","touches","isJoystickTouch","preventDefault","moveJoystickBall","changedTouches","resetJoystickBall","target","HTMLElement","id","joystickBall","getElementById","joystickRing","left","top","getBoundingClientRect","ringCenterX","ringCenterY","deltaX","clientX","deltaY","clientY","style","updateKeysBasedOnAngle","adjustedAngle","atan2","directionIndex","resetKeys","forEach","dir","Object","key","InputHandler","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","altKeys","w","s","a","d","setupEventListeners","joystick","handleKeyDownUp","toLocaleLowerCase","type","Weapon","size","font","letter","color","metrics","measureText","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","startingLoc","randomStartingLoc","randomTrajectory","speed","startingLocs","Error","fillText","hasCollidedWithBall","ball","centersDiffX","abs","centersDiffY","isOutOfBounds","isTrajectoryComplete","Game","canvasId","getContext","textBaseline","running","animationFrameId","difficultySlider","difficulty","parseInt","value","weapons","clearCanvas","clearRect","gameLoop","push","filter","requestAnimationFrame","gameOver","start","restartGame","modal","querySelector","remove","createElement","classList","add","innerHTML","controlButton","bind","body","appendChild","stop","cancelAnimationFrame","display","textAlign","currentGame","main"],"sourceRoot":""}